{
	"main": {
		"prefix": "main",
		"body": [
			"#include <iostream>",
			"#include <vector>",
			"#include <queue>",
			"#include <map>",
			"#include <set>",
			"#include <algorithm>",
			"#include <cmath>",
			"#include <string>",
			"#include <utility>",
			"#include <deque>",
			"",
			"using namespace std;",
			"using ll = long long;",
			"",
			"const ll INF = 1LL << 60;",
			"template <class T> inline bool chmin(T &a, T b) {",
			"    if (a > b) {",
			"        a = b;",
			"        return true;",
			"    }",
			"    return false;",
			"}",
			"template <class T> inline bool chmax(T &a, T b) {",
			"    if (a < b) {",
			"        a = b;",
			"        return true;",
			"    }",
			"    return false;",
			"}",
			"",
			"int main() {",
			"    $1",
			"    return 0;",
			"}"
		]
	},
	"bfs": {
		"prefix": "bfs",
		"body": [
			"using Graph = vector<vector<int>>;",
			"",
			"void bfs(const Graph& G, int start, vector<int>& dist) {",
			"    int n = G.size();",
			"    queue<int> que;",
			"",
			"    dist[start] = 0; // 初期ノード",
			"    que.push(start);",
			"",
			"    while (!que.empty()) {",
			"        int v = que.front();",
			"        que.pop();",
			"",
			"        for (int nv : G[v]) {",
			"            if (dist[nv] != -1) continue; // 訪問済み",
			"            dist[nv] = dist[v] + 1;",
			"            que.push(nv);",
			"        }",
			"    }",
			"}",
			"",
			"int main() {",
			"    $1",
			"    int N, M; // 頂点数と辺数",
			"    cin >> N >> M;",
			"",
			"    Graph G(N); ",
			"    for (int i = 0; i < M; ++i) { // 辺の入力",
			"        int u, v;",
			"        cin >> u >> v;",
			"        u--; v--; // 0-indexedに変換",
			"        G[u].push_back(v);",
			"        G[v].push_back(u); // 無向グラフ",
			"    }",
			"",
			"    vector<int> dist(N, -1); // 距離配列",
			"    bfs(G, 0, dist); // 頂点0を始点としてBFS実行",
			"",
			"    for (int v = 0; v < N; ++v) {",
			"        cout << dist[v] << \"\\n\";",
			"    }",
			"",
			"    return 0;",
			"}"
		],
	},
	"bin": {
		"prefix": "bin",
		"body": [
			"ll binary_search(ll ok, ll ng, function<bool(ll)> condition) {",
			"    while (abs(ok - ng) > 1) {",
			"        ll mid = (ok + ng) / 2;",
			"        if (condition(mid)) {",
			"            ok = mid;",
			"        } else {",
			"            ng = mid;",
			"        }",
			"    }",
			"    return ok;",
			"}",
			"",
			"int main() {",
			"    $1",
			"    ll n, q;",
			"    cin >> n >> q;",
			"",
			"    vector<int> A(n);",
			"    for (auto &&a : A) cin >> a;",
			"    sort(A.begin(), A.end());",
			"",
			"    for (ll i = 0; i < q; i++) {",
			"        int x;",
			"        cin >> x;",
			"",
			"        auto condition = [&](ll mid) { return A[mid] >= x; };",
			"",
			"        ll idx = binary_search(n, -1, condition);",
			"        cout << n - idx << endl;",
			"    }",
			"",
			"    return 0;",
			"}"
		],
	},
	"divirsions": {
		"prefix": "divisors",
		"body": [
			"vector<long long> calc_divisors(long long N) {",
			" vector<long long> res;",
			"",
			" for (long long i = 1; i * i <= N; ++i) {",
			"  if (N % i != 0) continue;",
			"",
			"  res.push_back(i);",
			"",
			"  if (N / i != i) res.push_back(N / i);",
			" }",
			"",
			" sort(res.begin(), res.end());",
			" return res;",
			"}",
			"    $1",
		]
	},
	"prime_fac": {
		"prefix": "prime_fac",
		"body": [
			"vector<pair<long long, long long>> prime_factorize(long long N) {",
			"    vector<pair<long long, long long>> res;",
			"",
			"    for (long long p = 2; p * p <= N; ++p) {",
			"        if (N % p != 0) {",
			"            continue;",
			"        }",
			"",
			"        int e = 0;",
			"        while (N % p == 0) {",
			"            ++e;",
			"            N /= p;",
			"        }",
			"",
			"        res.emplace_back(p, e);",
			"    }",
			"",
			"    if (N != 1) {",
			"        res.emplace_back(N, 1);",
			"    }",
			"    return res;",
			"}",
			"",
			"int main() {",
			"    $1",
			"    int n;",
			"    cin >> n;",
			"    const auto &pf = prime_factorize(n);",
			"    for (const auto &p : pf) {",
			"        cout << p.first << \" \" << p.second << endl;",
			"    }",
			"    return 0;",
			"}"
		]
	},
	"dp": {
		"prefix": "dp",
		"body": [
			"int main() {",
			"    $1",
			" int n;",
			" cin >> n;",
			"",
			" vector<int> h(n); ",
			" for (int i = 0; i < n; ++i) {",
			"  cin >> h[i];",
			" }",
			" vector<ll> dp(n, INF);",
			"",
			" // 初期条件の設定",
			" dp[0] = 0;",
			"",
			" // ループ",
			" for (int i = 1; i < n; ++i) {",
			"  chmin(dp[i], dp[i - 1] + abs(h[i] - h[i - 1]));",
			" }",
			"",
			" // 結果の出力",
			" cout << dp[n - 1] << endl;",
			"",
			" return 0;",
			"}",
		]
	},
}